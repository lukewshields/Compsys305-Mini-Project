
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.all;
USE  IEEE.STD_LOGIC_ARITH.all;
USE  IEEE.STD_LOGIC_SIGNED.all;


entity powerups is 

	port (
		pixel_row, pixel_col : in std_logic_vector(9 downto 0):
		vert_sync, death, enable, collision, reset : in std_logic_vector(9 downto 0);
		red, green, blue, powerup_on_out : out std_logic
	);

end entity powerups;

architecture arc of powerups is 

signal powerup_on : std_logic;
signal size : std_logic_vector := conv_std_logic_vector(10, 10);
signal x_pos : std_logic_vector := conv_std_logic_vector(400, 10);
signal y_pos : std_logic_vector := conv_std_logic_vector(280, 10);


begin


powerup_on <= '1' when (
    (((pixel_col - x_pos) * (pixel_col - x_pos) + (pixel_row - y_pos) * (pixel_row - y_pos)) <= (size * size)) and 
    ((mode = "10" or mode = "01")) and
    ((((abs(pixel_col - x_pos) * 10) / size + (abs(pixel_row - y_pos) * 10) / size <= 10)
        and(((pixel_col - x_pos + size / 2) * (pixel_col - x_pos + size / 2) + (pixel_row - y_pos) * (pixel_row - y_pos)) <= 
		  (size * size / 2)) and
         (((pixel_col - x_pos - size / 2) * (pixel_col - x_pos - size / 2) + (pixel_row - y_pos) * (pixel_row - y_pos)) <= 
			(size * size / 2)))
    )
) else '0';

powerup_on_out <= powerup_on;

Red <=  powerup_on;
Green <= not powerup_on; 
Blue <=  not powerup_on;









end architecture arc;